//----------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenMsg. Version: 0.1.0.0
//     Don't change it manually.
//     2012-06-23T22:05:30+09:00
// </auto-generated>
//----------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using RosSharp.Message;
using RosSharp.Service;
using RosSharp.std_msgs;
namespace RosSharp.std_msgs
{
    ///<exclude/>
    public class ColorRGBA : IMessage
    {
        ///<exclude/>
        public ColorRGBA()
        {
        }
        ///<exclude/>
        public ColorRGBA(BinaryReader br)
        {
            Deserialize(br);
        }
        ///<exclude/>
        public float r { get; set; }
        ///<exclude/>
        public float g { get; set; }
        ///<exclude/>
        public float b { get; set; }
        ///<exclude/>
        public float a { get; set; }
        ///<exclude/>
        public string MessageType
        {
            get { return "std_msgs/ColorRGBA"; }
        }
        ///<exclude/>
        public string Md5Sum
        {
            get { return "a29a96539573343b1310c73607334b00"; }
        }
        ///<exclude/>
        public string MessageDefinition
        {
            get { return "float32 r\nfloat32 g\nfloat32 b\nfloat32 a"; }
        }
        ///<exclude/>
        public bool HasHeader
        {
            get { return false; }
        }
        ///<exclude/>
        public void Serialize(BinaryWriter bw)
        {
            bw.Write(r);
            bw.Write(g);
            bw.Write(b);
            bw.Write(a);
        }
        ///<exclude/>
        public void Deserialize(BinaryReader br)
        {
            r = br.ReadSingle();
            g = br.ReadSingle();
            b = br.ReadSingle();
            a = br.ReadSingle();
        }
        ///<exclude/>
        public int SerializeLength
        {
            get { return 4 + 4 + 4 + 4; }
        }
        ///<exclude/>
        public bool Equals(ColorRGBA other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return other.r.Equals(r) && other.g.Equals(g) && other.b.Equals(b) && other.a.Equals(a);
        }
        ///<exclude/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(ColorRGBA)) return false;
            return Equals((ColorRGBA)obj);
        }
        ///<exclude/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
                result = (result * 397) ^ r.GetHashCode();
                result = (result * 397) ^ g.GetHashCode();
                result = (result * 397) ^ b.GetHashCode();
                result = (result * 397) ^ a.GetHashCode();
                return result;
            }
        }
    }
}
