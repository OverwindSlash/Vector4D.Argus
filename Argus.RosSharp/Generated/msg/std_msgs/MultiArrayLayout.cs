//----------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenMsg. Version: 0.1.0.0
//     Don't change it manually.
//     2012-06-23T22:05:33+09:00
// </auto-generated>
//----------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using RosSharp.Message;
using RosSharp.Service;
using RosSharp.std_msgs;
namespace RosSharp.std_msgs
{
    ///<exclude/>
    public class MultiArrayLayout : IMessage
    {
        ///<exclude/>
        public MultiArrayLayout()
        {
            dim = new List<MultiArrayDimension>();
        }
        ///<exclude/>
        public MultiArrayLayout(BinaryReader br)
        {
            Deserialize(br);
        }
        ///<exclude/>
        public List<MultiArrayDimension> dim { get; set; }
        ///<exclude/>
        public uint data_offset { get; set; }
        ///<exclude/>
        public string MessageType
        {
            get { return "std_msgs/MultiArrayLayout"; }
        }
        ///<exclude/>
        public string Md5Sum
        {
            get { return "0fed2a11c13e11c5571b4e2a995a91a3"; }
        }
        ///<exclude/>
        public string MessageDefinition
        {
            get { return "MultiArrayDimension[] dim\nuint32 data_offset"; }
        }
        ///<exclude/>
        public bool HasHeader
        {
            get { return false; }
        }
        ///<exclude/>
        public void Serialize(BinaryWriter bw)
        {
            bw.Write(dim.Count); for(int i=0; i<dim.Count; i++) { dim[i].Serialize(bw);}
            bw.Write(data_offset);
        }
        ///<exclude/>
        public void Deserialize(BinaryReader br)
        {
            dim = new List<MultiArrayDimension>(br.ReadInt32()); for(int i=0; i<dim.Capacity; i++) { var x = new MultiArrayDimension(br);dim.Add(x);}
            data_offset = br.ReadUInt32();
        }
        ///<exclude/>
        public int SerializeLength
        {
            get { return 4 + dim.Sum(x => x.SerializeLength) + 4; }
        }
        ///<exclude/>
        public bool Equals(MultiArrayLayout other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return other.dim.SequenceEqual(dim) && other.data_offset.Equals(data_offset);
        }
        ///<exclude/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(MultiArrayLayout)) return false;
            return Equals((MultiArrayLayout)obj);
        }
        ///<exclude/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
                result = (result * 397) ^ dim.GetHashCode();
                result = (result * 397) ^ data_offset.GetHashCode();
                return result;
            }
        }
    }
}
