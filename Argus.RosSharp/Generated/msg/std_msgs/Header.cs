//----------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenMsg. Version: 0.1.0.0
//     Don't change it manually.
//     2012-06-23T22:05:31+09:00
// </auto-generated>
//----------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using RosSharp.Message;
using RosSharp.Service;
using RosSharp.std_msgs;
namespace RosSharp.std_msgs
{
    ///<exclude/>
    public class Header : IMessage
    {
        ///<exclude/>
        public Header()
        {
            frame_id = string.Empty;
        }
        ///<exclude/>
        public Header(BinaryReader br)
        {
            Deserialize(br);
        }
        ///<exclude/>
        public uint seq { get; set; }
        ///<exclude/>
        public DateTime stamp { get; set; }
        ///<exclude/>
        public string frame_id { get; set; }
        ///<exclude/>
        public string MessageType
        {
            get { return "std_msgs/Header"; }
        }
        ///<exclude/>
        public string Md5Sum
        {
            get { return "2176decaecbce78abc3b96ef049fabed"; }
        }
        ///<exclude/>
        public string MessageDefinition
        {
            get { return "uint32 seq\ntime stamp\nstring frame_id"; }
        }
        ///<exclude/>
        public bool HasHeader
        {
            get { return false; }
        }
        ///<exclude/>
        public void Serialize(BinaryWriter bw)
        {
            bw.Write(seq);
            bw.WriteDateTime(stamp);
            bw.WriteUtf8String(frame_id);
        }
        ///<exclude/>
        public void Deserialize(BinaryReader br)
        {
            seq = br.ReadUInt32();
            stamp = br.ReadDateTime();
            frame_id = br.ReadUtf8String();
        }
        ///<exclude/>
        public int SerializeLength
        {
            get { return 4 + 8 + 4 + frame_id.Length; }
        }
        ///<exclude/>
        public bool Equals(Header other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return other.seq.Equals(seq) && other.stamp.Equals(stamp) && other.frame_id.Equals(frame_id);
        }
        ///<exclude/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(Header)) return false;
            return Equals((Header)obj);
        }
        ///<exclude/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
                result = (result * 397) ^ seq.GetHashCode();
                result = (result * 397) ^ stamp.GetHashCode();
                result = (result * 397) ^ frame_id.GetHashCode();
                return result;
            }
        }
    }
}
